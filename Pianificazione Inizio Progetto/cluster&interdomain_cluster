
Cluster -> {
	"id": //text, key generated by the spatial partitioner to describe the spatial position of this cluster
	"type": "cluster"// value to differentiate between "cluster" and "inter_cluster" 
	"vertices_transformation": [[][][][]] //optional: a 2d square matrix of (#model_dimensions + 1) rows/colums, used to transform the vertices to the global model coords system. if it is the identity matrix it can be omitted (this happens when there is no transformation when building the clusters from the model)
	"vertices": [
		[//0° coord, //1°coord, ... //n°coord]//0° vertex,
		[]//1° vertex
		[]//2° vertex
		.
		.
		[]//last vertex
	];
	"v_attributes":[
		[//0°attr, ..., //k°attr]//0° vertex's attribute - data source dependent - could be a color, density
		[]//1° vertex's attr
		.
		.
		[]//last vertex attr
	];//this is optional, but probably will be often present
	"cells": [
		[//vertex index, //vertex index, ... //last vertex index]//0° face, 
		[],
		[],
		.
		.
		[]//last face
	]; //max order cells. for a 3d model each face is composed of 4 veritices
	"adjacent_clusters": [//first cluster id, .., //last cluster id]	//how to define an adjacent cluster? simpler answer: an adjacent cluster share a cell with this cluster 
	"interdomain_clusters": [ //0° interdomain_cluster id, //1° interdomain_cluster id , .., //last interdomain cluster id] // this attribute exists to describe the cells that lie between two or more clusters
}

InterDomain_Cluster mod A-> {
	"id": //text, key generated by the spatial partitioner to describe the parents of this cluster
	"type": "inter_cluster"// "cluster" or "inter_cluster" - value to differentiate between schema
	"parent_clusters": [//first cluster id, .., //last cluster id];
	"vertices": [
		[//0° coord, //1°coord, ... //n°coord]//0° vertex,
		[]//1° vertex
		[]//2° vertex
		.
		.
		[]//last vertex
	];
	"v_attributes":[
		[//0°attr, ..., //k°attr]//0° vertex's attribute - data source dependent - could be a color, density
		[]//1° vertex's attr
		.
		.
		[]//last vertex attr
	];//this is optional, but probably will be often present
	"cells": [
		[//vertex index, //vertex index, ... //last vertex index]//0° face, 
		[],
		[],
		.
		.
		[]//last face
	]; //max order cells. for a 3d model each face is composed of 4 veritices

}


example of a valid cluster, describing a tetrahedron
{
	"id": "0000001";
	"type": "cluster"; 
	"vertices_transformation": [[1.0,  0,  0,  0],
	 							[  0,1.0,  0,  0],
	 							[  0,  0,1.0,  0],
	 							[  0,  0,  0,1.0]];
	"vertices":[
				[ 2., 2., 2.],
    			[−2.,−2., 2.],
    			[−2., 2.,−2.],
   				[ 2.,−2.,−2.]
			];
	"v_attributes":[
				[0.5, 0.8],
				[28.44, 3.],
				[28.44, 3.],
				[3.4, 0.]
			];
	"cells":[
				[0, 1, 2, 3, 4]
			];
	"adjacent_clusters": []; 
	"interdomain_clusters": []
}